//=========================================================
//SStirng
//字符串类
//
//编写：方寸
//
//
//日期：2013-8-14
//=========================================================
#ifndef _S_STRING_H_
#define _S_STRING_H_

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define					S_STRING_BLOCK_SIZE			64

class SString
{
	//Data
private:
	char *m_pText;//字符串存储文本
	//Function
public:
	//=========================================================
	//函数：SString
	//说明：构造函数
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	SString()
	{
		m_pText=new char;
		*m_pText='\0';
	}
	//=========================================================
	//函数：SString
	//说明：构造函数
	//输入：
	//输出：
	//返回：
	//日期：2015-2-20
	//备注：
	//=========================================================
	SString(const char *strText)
	{
		m_pText=NULL;
		*this=strText;
	}
	//=========================================================
	//函数：SString
	//说明：构造函数
	//输入：
	//输出：
	//返回：
	//日期：2015-2-22
	//备注：
	//=========================================================
	SString(const SString &str)
	{
		m_pText=NULL;
		*this=str;
	}
	//=========================================================
	//函数：~SString
	//说明：解析函数
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	~SString()
	{
		if(m_pText)
			delete []m_pText;
		m_pText=NULL;
	}
	//=========================================================
	//函数：=(const char *str)
	//说明：运算符重载
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	void operator =(const char *str)
	{
		char *pText=NULL;

		pText=new char[strlen(str)+1];
		strcpy(pText,str);

		if(m_pText)
			delete []m_pText;

		m_pText=pText;
	}
	//=========================================================
	//函数：=(SString &str)
	//说明：运算符重载
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	void operator =(const SString &str)
	{
		char *pText=NULL;

		pText=new char[str.GetLength()+1];
		strcpy(pText,str.c_str());

		if(m_pText)
			delete []m_pText;

		m_pText=pText;
	}
	//=========================================================
	//函数：=(int num)
	//说明：运算符重载
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	void operator =(int num)
	{
		char str[255];

		sprintf(str,"%d",num);
		*this=str;
	}

	//=========================================================
	//函数：+=(char ch)
	//说明：运算符重载
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	void operator +=(char ch)
	{
		char *pText=NULL;

		pText=new char[GetLength()+2];
		strcpy(pText,m_pText);
		pText[GetLength()]=ch;
		pText[GetLength()+1]='\0';

		if(m_pText)
			delete []m_pText;

		m_pText=pText;
	}

	//=========================================================
	//函数：+=(const char *str)
	//说明：运算符重载
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	void operator +=(const char *str)
	{
		char *pText=NULL;

		pText=new char[GetLength()+strlen(str)+1];
		strcpy(pText,m_pText);
		strcat(pText,str);

		if(m_pText)
			delete []m_pText;

		m_pText=pText;
	}
	//=========================================================
	//函数：+=(SString &str)
	//说明：运算符重载
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	void operator +=(SString &str)
	{
		char *pText=NULL;

		pText=new char[GetLength()+str.GetLength()+1];
		strcpy(pText,m_pText);
		strcat(pText,str.c_str());

		if(m_pText)
			delete []m_pText;

		m_pText=pText;
	}

	//=========================================================
	//函数：+=(int num)
	//说明：运算符重载
	//输入：
	//输出：
	//返回：
	//日期：2015-3-25
	//备注：
	//=========================================================
	void operator +=(int num)
	{
        char str[256];

        sprintf(str,"%d",num);

        *this+=str;
	}

	//=========================================================
	//函数：!=(const char *str)
	//说明：运算符重载
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	bool operator !=(const char *str)
	{
		return !!strcmp(m_pText,str);
	}

	//=========================================================
	//函数：!=(SString &str)
	//说明：运算符重载
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	bool operator !=(SString &str)
	{
		return !!strcmp(m_pText,str.c_str());
	}

	//=========================================================
	//函数：==(const char *str)
	//说明：运算符重载
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	bool operator ==(const char *str)
	{
		return !strcmp(m_pText,str);
	}

	//=========================================================
	//函数：==(SString &str)
	//说明：运算符重载
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	bool operator ==(SString &str)
	{
		return !strcmp(m_pText,str.m_pText);
	}

	//=========================================================
	//函数：<(const SString &str)
	//说明：运算符重载
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	bool operator < (const SString &str) const
	{
		return strcmp(c_str(),str.c_str())<0?true:false;
	}

	//=========================================================
	//函数：StartWith
	//说明：字符串是否以给定的字符串开始
	//输入：
	//输出：
	//返回：
	//日期：2013-10-3
	//备注：
	//=========================================================
	bool StartWith(const char *str)
	{
		int i;

		i=0;
		while(str[i])
		{
			if(str[i]!=m_pText[i])
				return false;

			i++;
		}

		return true;
	}

	//=========================================================
	//函数：StartWith
	//说明：字符串是否以给定的字符串开始
	//输入：
	//输出：
	//返回：
	//日期：2013-10-3
	//备注：
	//=========================================================
	bool StartWith(SString &str)
	{
		int i;

		i=0;
		while(str.c_str()[i])
		{
			if(str.c_str()[i]!=m_pText[i])
				return false;

			i++;
		}

		return true;
	}

	//=========================================================
	//函数：ToUpper
	//说明：字符串大写化
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	void ToUpper()
	{
		char *pch;

		pch=m_pText;

		while(*pch!='\0')
		{
			if(islower(*pch))
				*pch-=32;
			pch++;
		}
	}
	//=========================================================
	//函数：ToLower
	//说明：字符串小写化
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	void ToLower()
	{
		char *pch;

		pch=m_pText;

		while(*pch!='\0')
		{
			if(isupper(*pch))
				*pch+=32;
			pch++;
		}
	}

	//=========================================================
	//函数：c_str()
	//说明：获取C串
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	const char *c_str() const
	{
		return m_pText;
	}
	//=========================================================
	//函数：GetLength()
	//说明：获取字符串长度
	//输入：
	//输出：
	//返回：
	//日期：2013-8-14
	//备注：
	//=========================================================
	int GetLength() const
	{
		return strlen(m_pText);
	}
};

#endif
